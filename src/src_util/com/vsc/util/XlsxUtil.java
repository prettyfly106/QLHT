/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.55
 * Generated at: 2016-03-27 11:02:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package com.vsc.util;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.PrintSetup;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.*;

import report.util.DateUtil;
import intellsoft.db.DBUtil;
import intellsoft.db.RecordSet;

public final class XlsxUtil  {


public static void buildHeader(Sheet sheet,Row[] rows,HashMap params) {
	for(int i=0;i<rows.length;i++) {
		
		Row tplRow = rows[i];
		int rowIdx=sheet.getLastRowNum()+1;
		System.out.println("rows["+i+"].rowIdx="+rowIdx);
		Row newRow= sheet.createRow(rowIdx);
		Workbook wb=sheet.getWorkbook();
		Iterator<Cell> cellIterator = tplRow.cellIterator();
		cellIterator.next();//ignore first cell (CONTROL CELL) 
		int colIdx=0;
		Cell newCell=null;
		String newValue="";
		int ii=0;
        while (cellIterator.hasNext()) {
        	ii++;
        	
            Cell cell = cellIterator.next();
            colIdx=cell.getColumnIndex()-1;
            CellStyle cellStyle=cell.getCellStyle();
            CellStyle newCellStyle=wb.createCellStyle();
            String cellValue=cell.getStringCellValue();
            //System.out.println("rows["+i+"].cell["+ii+"]="+cellValue);
            String cltType="";
            String strValue="";
            if(cellValue!=null && cellValue.length()>1) {
            	cltType=cellValue.substring(0,1);
            	strValue = cellValue.substring(1);
            }
            
            if(cltType.equalsIgnoreCase("*")) {
            	//'Tên nhãn (sẽ được thay đổi)
                newValue=(String)params.get(strValue);
                //colIdx=newRow.getLastCellNum()+1;
                //System.out.println("colIdx="+colIdx+" strValue="+strValue);
                newCell = newRow.createCell(colIdx);
                newCell.setCellValue(newValue);
                newCellStyle.cloneStyleFrom(cellStyle);
                newCell.setCellStyle(newCellStyle);
			} else if(cltType.equalsIgnoreCase("$")||cltType.equalsIgnoreCase("#")) {
            	//'$=Nhãn (không thay đổi),#=Nhãn (tên báo cáo)
                newValue=strValue;
                //colIdx=newRow.getLastCellNum()+1;
                //System.out.println("colIdx="+colIdx+" strValue="+strValue);
                newCell = newRow.createCell(colIdx);
                newCell.setCellValue(newValue);
                newCellStyle.cloneStyleFrom(cellStyle);
                newCell.setCellStyle(newCellStyle);
            } else if(cltType.equalsIgnoreCase("&")) {	                                
            	//'Tên trường
                
            } else if(cltType.equalsIgnoreCase("S")) {    
            	//'Tên trường tổng cộng
                //?strValue = strValue.substring(2);
                
            }
        }
	}
}

public static void buildDetail(Sheet sheet,Row[] rows,HashMap params,RecordSet rsData) {
	for(int i=0;i<rows.length;i++) {
		Row tplRow = rows[i];
		int rowIdx=sheet.getLastRowNum()+1;
		Row newRow= sheet.createRow(rowIdx);
		Workbook wb=sheet.getWorkbook();
		int rn=rows[i].getRowNum();
		System.out.println("buildDetail rn="+rn);
		
		Iterator<Cell> cellIterator = tplRow.cellIterator();
		cellIterator.next();//ignore first cell (CONTROL CELL) 
		int colIdx=0;
		Cell newCell=null;
		String newValue="";
		int ii=0;
		while (cellIterator.hasNext()) {
            Cell cell = cellIterator.next();
            ii++;
            colIdx=cell.getColumnIndex()-1;
            CellStyle cellStyle=cell.getCellStyle();
            CellStyle newCellStyle=wb.createCellStyle();
            String cellValue=cell.getStringCellValue();
            System.out.println("buildDetail rows["+i+"].cell["+ii+"]="+cellValue);
            String cltType="";
            String strValue="";
            if(cellValue!=null && cellValue.length()>1) {
            	cltType=cellValue.substring(0,1);
            	strValue = cellValue.substring(1);
            }
            
            if(cltType.equalsIgnoreCase("*")) {
            	//'Tên nhãn (sẽ được thay đổi)
                newValue=(String)params.get(strValue);
                //colIdx=newRow.getLastCellNum()+1;
                System.out.println("colIdx="+colIdx);
                newCell = newRow.createCell(colIdx);
                newCell.setCellValue(newValue);
                newCellStyle.cloneStyleFrom(cellStyle);
                newCell.setCellStyle(newCellStyle);
			} else if(cltType.equalsIgnoreCase("$")||cltType.equalsIgnoreCase("#")) {
            	//'$=Nhãn (không thay đổi),#=Nhãn (tên báo cáo)
                newValue=strValue;
                //colIdx=newRow.getLastCellNum()+1;
                System.out.println("colIdx="+colIdx);
                newCell = newRow.createCell(colIdx);
                
                newCell.setCellValue(newValue);
                newCellStyle.cloneStyleFrom(cellStyle);
                newCell.setCellStyle(newCellStyle);
            } else if(cltType.equalsIgnoreCase("&")) {	                                
            	//'Tên trường
                newValue=rsData.getString(strValue);
                System.out.println("strValue="+strValue+" newValue="+newValue);
                //colIdx=newRow.getLastCellNum()+1;
                newCell = newRow.createCell(colIdx);
                newCell.setCellValue(newValue);
                newCellStyle.cloneStyleFrom(cellStyle);
                newCell.setCellStyle(newCellStyle);
            } else if(cltType.equalsIgnoreCase("S")) {    
            	//'Tên trường tổng cộng
                strValue = strValue.substring(2);
                
            }
        }
	}
}
public static String xlsReport(String tplName,String dstName,HashMap params,RecordSet rsData) {
	try {
	        //String excelFilePath = "Books.xlsx";
	        FileInputStream inputStream = new FileInputStream(new File(tplName));
	         
	        Workbook workbook = new XSSFWorkbook(inputStream);
	        Sheet firstSheet = workbook.getSheetAt(0);
	        
	        Iterator<Row> iterator = firstSheet.iterator();
	        HashMap<String,ArrayList> sections=new HashMap();
	        ArrayList sectionRow=null;
	        int groupCount=0;
	        String currSect="";
	        //String prevSect="";
	        int ii=0;
	        sectionRow=new ArrayList();
	        String prevValue="";
	        String cellValue="";
	        while (iterator.hasNext()) {
	        	ii++;
	            Row nextRow = iterator.next();
	            Cell cell = nextRow.getCell(0);
	            if(cell!=null) {
		            cellValue=cell.getStringCellValue();
		            if(cellValue==null || cellValue.equalsIgnoreCase("")) {
		            	cellValue=prevValue;
		            }
		            else {
		            	prevValue=cellValue;
		            }
	            }
	            else {
	            	cellValue=prevValue;
	            }
	            System.out.println("cellValue["+ii+"]="+cellValue+" prevValue="+prevValue+" currSect="+currSect);
	            if(!cellValue.equalsIgnoreCase(currSect)) {
	            	if(!currSect.equalsIgnoreCase("")) {
		            	Row rr=(Row)sectionRow.get(0);
	            		Cell cc=rr.getCell(1);
	            		System.out.println("add cellValue="+cellValue+" currSect="+currSect+" cc="+(cc==null ? "" : cc.getStringCellValue()));
	            		sections.put(currSect, sectionRow);
	            		sectionRow=new ArrayList();
	            		if(currSect.substring(0,1).equalsIgnoreCase("G")) {
		            		groupCount++;
		            	}
	            	}
	            	currSect=cellValue;
	            }
	            Cell cell2 = nextRow.getCell(1);
	            System.out.println("xxx cellValue="+cellValue+"  currSect="+currSect+" nextRow.getRowNum()="+nextRow.getRowNum()+" cell2="+(cell2==null ? "" : cell2.getStringCellValue()) );
            	sectionRow.add(nextRow);
	        }
	        if(!currSect.equalsIgnoreCase("") && sectionRow.size()>0) {
        		//System.out.println("prevSect="+prevSect+" sectionRow.size()="+sectionRow.size());
        		sections.put(currSect, sectionRow);
        	}
	        Workbook wb;
	        //wb = new HSSFWorkbook();
	        wb = new XSSFWorkbook();
	        Sheet sheet = wb.createSheet("SheetData");
	        sheet.setDisplayGridlines(false);
	        sheet.setPrintGridlines(false);
	        sheet.setFitToPage(true);
	        sheet.setHorizontallyCenter(true);
	        PrintSetup printSetup = sheet.getPrintSetup();
	        printSetup.setLandscape(true);

	        //the following three statements are required only for HSSF
	        sheet.setAutobreaks(true);
	        printSetup.setFitHeight((short)1);
	        printSetup.setFitWidth((short)1);
	        
	        
	        sectionRow=sections.get("RH");
	        int rowIdx=0;
	        int colIdx=0;
	        if(sectionRow!=null) {
	        	Row[] rows=(Row[])sectionRow.toArray(new Row[sectionRow.size()]);
	        	//System.out.println("RH rows.length="+rows.length);
	        	buildHeader(sheet,rows,params);
	        }
	        sectionRow=sections.get("PH");
	        if(sectionRow!=null) {
	        	Row[] rows=(Row[])sectionRow.toArray(new Row[sectionRow.size()]);
	        	//System.out.println("PH rows.length="+rows.length);
	        	buildHeader(sheet,rows,params);
	        }
	        sectionRow=sections.get("D");
	        if(sectionRow!=null) {
	        	Row[] rows=(Row[])sectionRow.toArray(new Row[sectionRow.size()]);
	        	int cnt=rsData.getColumnCount();
	        	for(int x=1;x<=cnt;x++) {
	        		System.out.println("ColumnName["+x+"]="+rsData.getColumnName(x));
	        	}
	        	while(rsData.next()) {
		        	buildDetail(sheet,rows,params,rsData);
		        }
	        }
	        sectionRow=sections.get("PF");
	        if(sectionRow!=null) {
	        	Row[] rows=(Row[])sectionRow.toArray(new Row[sectionRow.size()]);
	        	//System.out.println("PH rows.length="+rows.length);
	        	buildHeader(sheet,rows,params);
	        }
	        sectionRow=sections.get("RF");
	        if(sectionRow!=null) {
	        	Row[] rows=(Row[])sectionRow.toArray(new Row[sectionRow.size()]);
	        	//System.out.println("PH rows.length="+rows.length);
	        	buildHeader(sheet,rows,params);
	        }
	        workbook.close();
	        inputStream.close();
	        FileOutputStream out = new FileOutputStream(dstName);
	        wb.write(out);
	        out.close();
	        
	        wb.close();
	        
	}catch(Exception e) {
		e.printStackTrace();
	}
	
	return "";
}
public static void copyCellStyle(Cell cell, CellStyle newCellStyle) {
    newCellStyle.setAlignment(cell.getCellStyle().getAlignment());
    newCellStyle.setBorderBottom(cell.getCellStyle().getBorderBottom());
    newCellStyle.setBorderLeft(cell.getCellStyle().getBorderLeft());
    newCellStyle.setBorderRight(cell.getCellStyle().getBorderRight());
    newCellStyle.setBorderTop(cell.getCellStyle().getBorderTop());
    newCellStyle.setBottomBorderColor(cell.getCellStyle().getBottomBorderColor());
    newCellStyle.setDataFormat(cell.getCellStyle().getDataFormat());
    newCellStyle.setFillBackgroundColor(cell.getCellStyle().getFillBackgroundColor());
    newCellStyle.setFillForegroundColor(cell.getCellStyle().getFillForegroundColor());
    newCellStyle.setFillPattern(cell.getCellStyle().getFillPattern());
    //newCellStyle.setFont(cell.getCellStyle().getFont(cell.getSheet().getWorkbook()));
    newCellStyle.setHidden(cell.getCellStyle().getHidden());
    newCellStyle.setIndention(cell.getCellStyle().getIndention());
    newCellStyle.setLeftBorderColor(cell.getCellStyle().getLeftBorderColor());
    newCellStyle.setLocked(cell.getCellStyle().getLocked());
    newCellStyle.setRightBorderColor(cell.getCellStyle().getRightBorderColor());
    newCellStyle.setRotation(cell.getCellStyle().getRotation());
    newCellStyle.setShrinkToFit(cell.getCellStyle().getShrinkToFit());
    newCellStyle.setTopBorderColor(cell.getCellStyle().getTopBorderColor());
    // newCellStyle.setUserStyleName(cell.getCellStyle().getUserStyleName()); -> ignore
    newCellStyle.setVerticalAlignment(cell.getCellStyle().getVerticalAlignment());
    newCellStyle.setWrapText(cell.getCellStyle().getWrapText());
}
public static boolean compareRow(Row r1,Row r2) {
	Iterator<Cell> cellIterator = r1.cellIterator();
    
    while (cellIterator.hasNext()) {
    	Cell cell = cellIterator.next();
    	String c1=cell.getStringCellValue();
    	int c1i=cell.getColumnIndex();
    	Cell cell2=r2.getCell(c1i);
    	String c2=cell2.getStringCellValue();
    	if(c2.equalsIgnoreCase(c1)) {
    		return false;
    	}
    }
	return true;
}

public static void xlsMerge(String srcFile1,String srcFile2) {
	try {
        FileInputStream inputStream1 = new FileInputStream(new File(srcFile1));
        Workbook workbook1 = new XSSFWorkbook(inputStream1);
        Sheet firstSheet1 = workbook1.getSheetAt(0);
        int lastRow1=firstSheet1.getLastRowNum();
        
        FileInputStream inputStream2 = new FileInputStream(new File(srcFile2));
        Workbook workbook2 = new XSSFWorkbook(inputStream2);
        Sheet firstSheet2 = workbook2.getSheetAt(0);
        int lastRow2=firstSheet1.getLastRowNum();
        Row firstRow1=firstSheet1.getRow(0);
        Row firstRow2=firstSheet2.getRow(0);
        if(compareRow(firstRow1,firstRow2)) {
        	int rn=lastRow1;
        	Iterator<Row> iterator = firstSheet2.iterator();
        	iterator.next();//ignore first row
        	while (iterator.hasNext()) {
                Row nextRow = iterator.next();
                rn++;
                Row newRow=firstSheet1.createRow(rn);
                
                Iterator<Cell> cellIterator = nextRow.cellIterator();
                
                while (cellIterator.hasNext()) {
                    Cell cell = cellIterator.next();
                    Cell newCell= newRow.createCell(cell.getColumnIndex()); 
                    switch (cell.getCellType()) {
                        case Cell.CELL_TYPE_STRING:
                            //System.out.print(cell.getStringCellValue());
                            newCell.setCellValue(cell.getStringCellValue());
                            break;
                        case Cell.CELL_TYPE_BOOLEAN:
                            //System.out.print(cell.getBooleanCellValue());
                            newCell.setCellValue(cell.getBooleanCellValue());
                            break;
                        case Cell.CELL_TYPE_NUMERIC:
                            //System.out.print(cell.getNumericCellValue());
                            newCell.setCellValue(cell.getNumericCellValue());
                            break;
                        case Cell.CELL_TYPE_FORMULA:
                            //System.out.print(cell.getCellFormula());
                            newCell.setCellFormula(cell.getCellFormula());
                            break;
                    }
                    System.out.print(" - ");
                }
                System.out.println();
            }
        }
         
        FileOutputStream out = new FileOutputStream("D:\\Vsc\\hPortalProject\\tailieu\\3360\\f79_3.xlsx");
        workbook1.write(out);
        out.close();
        
        workbook1.close();
        inputStream1.close();
        workbook2.close();
        inputStream2.close();
}catch(Exception e) {
	e.printStackTrace();
}
}
public static void main(String[] args) throws Exception {
	//testMerge();
	test2();
}
public static void testMerge() throws Exception {
	xlsMerge("D:\\Vsc\\hPortalProject\\tailieu\\3360\\f79_1.xlsx","D:\\Vsc\\hPortalProject\\tailieu\\3360\\f79_2.xlsx");
}
public static void test1() throws Exception {
	String sSQL="{call baocao_02.bc_benhtruyennhiem($P{loai_nsd},$P{ma_tinh},$P{dvtt},$P{tungay},$P{denngay},$P{ORACLE_REFCURSOR})}";
	//String db_name = "jdbc:oracle:thin:his_esb/123@123.31.27.51:1521:db01";
	String db_name = "jdbc:oracle:thin:his_esb/123@123.31.22.17:1521:db1";
	RecordSet rs=null;
	HashMap paramMap=new HashMap();

	paramMap.put("loai_nsd", new Long(1));
	paramMap.put("ma_tinh", "1");
	paramMap.put("dvtt", "1");
	paramMap.put("tungay", DateUtil.toDate("2016-04-01 08:31:27.0", "yyyy-MM-dd HH:mm:ss.SSS"));
	paramMap.put("denngay", DateUtil.toDate("2016-04-29 08:31:30.0", "yyyy-MM-dd HH:mm:ss.SSS"));
	if(sSQL.indexOf("{call")==-1) { 
		rs = DBUtil.executeQuery(db_name, sSQL);
	}
	else {
		rs=DBUtil.CALL_PLSQL_SP_R(db_name, sSQL, paramMap);
	}
	
	if (rs != null) {
		String tplFile="d:\\tplTest.xlsx";
		String dstFile="d:\\tmpData.xlsx";
		XlsxUtil.xlsReport(tplFile, dstFile, (HashMap)paramMap, rs);
	}
}
public static void test2() {
	try {
	String db_name = "jdbc:oracle:thin:his_esb/123@123.31.22.17:1521:db1";
	String sSQL="{call baocao_02.bc_benhtruyennhiem($P{loai_nsd},$P{ma_tinh},$P{dvtt},$P{tungay},$P{denngay},$P{ORACLE_REFCURSOR})}";
	RecordSet rs=null;
		HashMap paramMap=new HashMap();

		paramMap.put("loai_nsd", new Long(1));
		paramMap.put("ma_tinh", "1");
		paramMap.put("dvtt", "1");
		paramMap.put("tungay", DateUtil.toDate("2016-04-01 08:31:27.0", "yyyy-MM-dd HH:mm:ss.SSS"));
		paramMap.put("denngay", DateUtil.toDate("2016-04-29 08:31:30.0", "yyyy-MM-dd HH:mm:ss.SSS"));
		if(sSQL.indexOf("{call")==-1) { 
			rs = DBUtil.executeQuery(db_name, sSQL);
		}
		else {
			rs=DBUtil.CALL_PLSQL_SP_R(db_name, sSQL, paramMap);
		} 
		Workbook wb;
      //wb = new HSSFWorkbook();
      wb = new XSSFWorkbook();
      Sheet sheet = wb.createSheet("SheetData");
      int cc=rs.getColumnCount();
      Row newRow= sheet.createRow(0);
      Cell newCell=null;
      for(int i=1;i<=cc;i++) {
      	newCell=newRow.createCell(i-1);
      	newCell.setCellValue(rs.getColumnName(i));
      	//System.out.println("rs.getColumnName(i)="+rs.getColumnName(i));
      }
      int j=1;
		while(rs.next()) {
			newRow= sheet.createRow(j);
			j++;
			for(int i=1;i<=cc;i++) {
				newCell=newRow.createCell(i-1);
	        	newCell.setCellValue(rs.getString(i));
	        	//System.out.println("rs.getString(i)="+rs.getString(i));
			}
		}
		ByteArrayOutputStream outByteStream = new ByteArrayOutputStream();
  		wb.write(outByteStream);
  		byte [] outArray = outByteStream.toByteArray();
  		CryptoUtil.toHex(outArray);
		FileOutputStream os = new FileOutputStream("d:\\test15.xlsx");
		wb.write(os);
		os.close();
	}catch(Exception e) {
		e.printStackTrace();
	}
}


public static void writeExcel(List<String> listBook, String excelFilePath) throws IOException {
	Workbook workbook = getWorkbook(excelFilePath);
	Sheet sheet = workbook.createSheet();
	
	int rowCount = 0;
	
	for (String aBook : listBook) {
		Row row = sheet.createRow(++rowCount);
		writeBook(aBook, row);
	}
	
	FileOutputStream outputStream = new FileOutputStream(excelFilePath);
	workbook.write(outputStream);
}

private static void writeBook(String aBook, Row row) {
	String _book[]=aBook.split(",");
	Cell cell = row.createCell(1);
	cell.setCellValue(_book[0]);

	cell = row.createCell(2);
	cell.setCellValue(_book[1]);
	
	cell = row.createCell(3);
	cell.setCellValue(_book[2]);
}

private static List<String> getListBook() {
	String book1 = "Head First Java,Kathy Serria, 79";
	String book2 = "Effective Java,Joshua Bloch, 36";
	String book3 = "Clean Code,Robert Martin, 42";
	String book4 = "Thinking in Java, Bruce Eckel, 35";
	
	List<String> listBook = Arrays.asList(book1, book2, book3, book4);
	
	return listBook;
}

private static Workbook getWorkbook(String excelFilePath) 
		throws IOException {
	Workbook workbook = null;
	
	if (excelFilePath.endsWith("xlsx")) {
		workbook = new XSSFWorkbook();
	} else if (excelFilePath.endsWith("xls")) {
		workbook = new HSSFWorkbook();
	} else {
		throw new IllegalArgumentException("The specified file is not Excel file");
	}
	
	return workbook;
}
public static void test3() throws IOException {
	List<String> listBook = getListBook();
	String excelFilePath = "d:\\JavaBooks1.xls";
	writeExcel(listBook, excelFilePath);
	
	excelFilePath = "d:\\JavaBooks2.xlsx";
	writeExcel(listBook, excelFilePath);
}
}
